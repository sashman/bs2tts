import Head from "next/head";
import { Inter } from "@next/font/google";
import styles from "../styles/Home.module.css";

import { FileUploader } from "react-drag-drop-files";
import useAxios from "axios-hooks";

import { FaGithub, FaFileUpload } from "react-icons/fa";
import { SiBuymeacoffee } from "react-icons/si";
import Image from "next/image";
import { useCopyToClipboard } from "usehooks-ts"

const inter = Inter({ subsets: ["latin"] });
const fileTypes = ["rosz"];
const bs2ttsBackendUrl =
  "https://bs2tts2pwqnfvyw-bs2tts2-backend.functions.fnc.fr-par.scw.cloud/roster";

function DragDrop() {
  const [{ data, loading, error }, request] = useAxios(
    {
      url: bs2ttsBackendUrl,
      method: "POST",
      headers: { "Content-Type": "multipart/form-data" },
      params: { addScripts: true }
    },
    { manual: true }
  );

  const [ value, copy ] = useCopyToClipboard();

  const handleChange = async (files: File) => {
    console.log(files);

    const form = new FormData();
    form.append("roster", files);

    await request({
      data: form,
    });
  };

  return (
    <>
      <FileUploader handleChange={handleChange} name="file" types={fileTypes}>
        <label htmlFor="roster-file" className={styles.mainUpload}>
          <FaFileUpload /> Upload roster file (.rosz)
        </label>
      </FileUploader>
      <div className={styles.status}>
        {loading && <span>Loading...</span>}
        {error && <span>Error: {error.message}</span>}
        {data && (
          <span
            className={styles.rosterId}
            onClick={() => {
              copy(data.id)
            }}
          >
            {data.id}
          </span>
        )}
        <div className={styles.tooltip}>{ value ? 'Copied' : 'Click to copy' }</div>
      </div>
    </>
  );
}

function Footer() {
  return (
    <footer className={styles.footer}>
      <nav>
        <ul>
          <li>
            <a
              rel="norefferrer"
              href="https://github.com/sashman/bs2tts/issues/new"

            >
              <FaGithub /> Report Issues
            </a>
          </li>
          <li>
            <a rel="norefferrer" href="https://www.buymeacoffee.com/sashman">
              <SiBuymeacoffee /> Support by donating
            </a>
          </li>
        </ul>
      </nav>
    </footer>
  );
}

export default function Home() {
  return (
    <div className={styles.layout}>
      <Head>
        <title>BS2TTS</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.description}>
          <Image
            src="bs2tts.png"
            alt="Battlescribe to Tabletop Simulator logo"
            width={415}
            height={258}
          />
          <h1>BS2TTS</h1>
          <p> Battlescribe to Tabletop Simulator</p>
        </div>

        <div>
          <DragDrop />
        </div>

        <div className={styles.howToText}>
          <p>
            This website is designed to be used with the in-game tool for
            Tabletop Simulator provided <a rel="noreferrer" href="https://steamcommunity.com/sharedfiles/filedetails/?id=2909560633">here</a>.
          </p>
          <p>
            This tool helps with importing Warhammer 40k rosters created in the
            Battlescribe army builder tool into TTS. To use this tool first
            create a roster with <a rel="noreferrer" href="https://battlescribe.net/?tab=news">Battlescribe</a> and save the roster file (the
            file created should have the .rosz extension). Click the upload area
            or drag a file to upload the .rosz roster. When the roster is
            uploaded, you&apos;ll be provided a code - copy this to your clipboard.
          </p>
          <p>
            In Tabletop Simulator, paste the code into the Battlescribe2TTS tool
            and then click &quot;Submit Code&quot;. A series of buttons will be created
            corresponding to the various selections in your army. To tell the
            tool which in-game model to use for a particular selection, first
            click the button, then pick up the model you want to use. The button
            should change colors to indicate the model has been saved. Once all
            models have been selected, click the &quot;Create Army&quot; button. The
            models for your army will be spawned into the game, organized by
            unit, with their names and descriptions filled in from your
            Battlescribe data.
          </p>
          <p>You&apos;re ready to play!</p>
        </div>
      </main>
      <Footer />
    </div>
  );
}
